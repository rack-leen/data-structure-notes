/********************************************************************
 *	@program name : PerenthesisMatching.h
 *	@author  name : rack
 *	@my      mail : 1740234864@qq.com
 *	@last    date : 2017.11.4
 *	@function     : 括号匹配，必须是成对括号才匹配
 *	@type         : header file
*********************************************************************/

/********************************************************************
*基本操作
*InitStack  初始化栈
*Push       插入元素 进栈
*Pop        删除元素 退栈
*Conversion 数制转换
*括号匹配方法：
*
*********************************************************************/

/********************************************************************
*定义域
*********************************************************************/
#ifndef _PERENTHESISMATCHING_H
#define _PERENTHESISMATCHING_H


/********************************************************************
*头文件
*********************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/********************************************************************
*define定义区
*********************************************************************/
#define TRUE            1
#define FALSE           0
#define OK              1
#define ERROR           0
#define INFEASIBLE      -1
#define OVERFLOW        -2
#define STACK_INCREMENT 10					                                //存储空间的分配增量
#define STACK_INIT_SIZE 100                                         //存储空间的初始分配量

/********************************************************************
*自定义类型
*********************************************************************/
typedef int Status   ;
typedef int Elemtype ;

/********************************************************************
*栈的结构体
*********************************************************************/
typedef struct {
	int *base    ;                                              //栈基指针
	int *top     ;                                              //栈顶指针
	int stacksize;                                              //栈长度
}SqStack             ;

/********************************************************************
*函数的表示
*********************************************************************/
Status InitStack(SqStack *S)           ;                            //初始化栈
Status GetTop(SqStack *s , Elemtype *e);                            //获取元素
Status Push(SqStack *S , Elemtype e)   ;                            //插入元素，进栈
Status Pop(SqStack *S , Elemtype *e)   ;                            //删除元素，退栈
Status Matching(SqStack *S , char *str);                            //括号匹配，讲所有需要判断的组成一个数组

#endif
/********************************************************************
end
*********************************************************************/
